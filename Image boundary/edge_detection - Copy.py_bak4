from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.stride_tricks import as_strided
from scipy import ndimage


######## K- means ############

def kmeans(data, k):
    clusterAssment = np.zeros(shape=(data.shape[0], 2))
    clusterAssment[:,0] = data
    cluster_changed = True
    centroids = [data.max(), data.min()]
    # print(centroids, '\n', clusterAssment)

    while cluster_changed:
        cluster_changed = False

        ## for each point in data
        for i in range(data.shape[0]):
            minDist = 10000.0
            min_index = 0

            ## for each centroid, find the centroid which is the closest
            for j in range(k):
                distance = abs(data[i]-centroids[j])
                if distance < minDist:
                    minDist = distance
                    min_index = j

            if clusterAssment[i,1] != min_index:
                cluster_changed = True
                clusterAssment[i, 1] = min_index

        for j in range(k):
            tag = np.where(clusterAssment[:,1] == j)[0]
            if len(tag) >0:
                s = 0
                for element in tag:
                    s += clusterAssment[element][0]
                centroids[j] = s / len(tag)

    # print('Congratulations, cluster complete!')
    return centroids, clusterAssment


######## K- means ############


# function below used to compress image for quicker calculation

def strided_rescale(g, bin_fac):
    strided = as_strided(g,
        shape=(g.shape[0]//bin_fac, g.shape[1]//bin_fac, bin_fac, bin_fac),
        strides=((g.strides[0]*bin_fac, g.strides[1]*bin_fac)+g.strides))
    return strided.mean(axis=-1).mean(axis=-1)

# function above used to compress image for quicker calculation

original_img = np.array(Image.open('E:\Python\Image boundary\\image-204-1-0-0-0.bmp').convert('L'), 'i')     # open target image
ratio = int(original_img.shape[0]/512)
# ratio can be defined by user, now all images will be compressed to 512X512 px
rescaled_image = np.flipud(np.uint8(strided_rescale(original_img, ratio)))

img = Image.fromarray(rescaled_image, 'L')                  # transfer rescaled array to bmp for check purpose
img.save('E:\Python\Image boundary\\img.bmp')     # save rescaled image to bmp for check purpose

# Start to calculate  profile of image

sum_x = np.zeros(shape=(rescaled_image.shape[1]), dtype=int)
sum_y = np.zeros(shape=(rescaled_image.shape[0]), dtype=int)

for c in range(rescaled_image.shape[0]):
    for r in range(rescaled_image.shape[1]):
        sum_x[c] += rescaled_image[r][c]

for r in range(rescaled_image.shape[1]):
    for c in range(rescaled_image.shape[0]):
        sum_y[r] += rescaled_image[r][c]

x_profile = sum_x / rescaled_image.shape[0]
y_profile = sum_y / rescaled_image.shape[1]

# Finish to calculate both X and Y profile of image

# star to do K-means
centroids, cluster1 = kmeans(x_profile, 2)
centroids, cluster2 = kmeans(x_profile, 2)
#K-means done

cluster_x = cluster1[:,1]
cluster_y = cluster2[:,1]
# x = abs(x_profile - rescaled_image.std()*3)
# y = abs(y_profile - rescaled_image.std()*3)

x_diff_abs = np.absolute(np.diff(x_profile))
y_diff_abs = np.absolute(np.diff(y_profile))

x_peak = np.where(x_diff_abs > (x_diff_abs.mean()*4))[0]           # 4 times larger than  mean is defined as a peak
y_peak = np.where(y_diff_abs > (y_diff_abs.mean()*4))[0]
# find the edge of pattern by the  diff peak which  is closest to cluster with higher GLV

edge_px_x = 0
edge_px_y = 0
# detect x direction edge and get edge px number
if x_peak.size > 0:
    x_l = x_peak[0]
    x_r = x_peak[-1]
    if abs(np.std(x_diff_abs[:x_l])-np.std(x_diff_abs)) > abs(np.std(x_diff_abs[x_r:])-np.std(x_diff_abs)):
        edge_px_x = x_r * ratio
        if np.mean(cluster_x[:int(len(cluster_x)/2)]) < np.mean(cluster_x[int(len(cluster_x)/2):]):
            x_dir = 'left edge'
        elif  np.mean(cluster_x[:int(len(cluster_x)/2)]) > np.mean(cluster_x[int(len(cluster_x)/2):]):
            x_dir = 'right edge'
        else:
            x_dir = 'X direction edge detection error!'

    elif abs(np.std(x_diff_abs[:x_l])-np.std(x_diff_abs)) < abs(np.std(x_diff_abs[x_r:])-np.std(x_diff_abs)):
        edge_px_x = x_l * ratio
        if np.mean(cluster_x[:int(len(cluster_x)/2)]) < np.mean(cluster_x[int(len(cluster_x)/2):]):
            x_dir = 'left edge'
        elif  np.mean(cluster_x[:int(len(cluster_x)/2)]) > np.mean(cluster_x[int(len(cluster_x)/2):]):
            x_dir = 'right edge'
        else:
            x_dir = 'X direction edge detection error!'
    else:
        x_dir = 'Cannot detect edge correctly!!!'
else:
    x_dir = 'center'
# detect x direction edge
# detect y direction edge
if y_peak.size > 0:
    y_b = y_peak[0]
    y_t = y_peak[-1]
    if abs(np.std(y_diff_abs[:y_b])-np.std(y_diff_abs)) > abs(np.std(y_diff_abs[y_t:])-np.std(y_diff_abs)):
        edge_px_y = y_t * ratio
        if np.mean(cluster_y[:int(len(cluster_y)/2)]) < np.mean(cluster_y[int(len(cluster_y)/2):]):
            y_dir = 'top edge'
        elif  np.mean(cluster_y[:int(len(cluster_y)/2)]) > np.mean(cluster_y[int(len(cluster_y)/2):]):
            y_dir = 'bottom edge'
        else:
            y_dir = 'Y direction edge detection error!'

    elif abs(np.std(y_diff_abs[:y_b])-np.std(y_diff_abs)) < abs(np.std(y_diff_abs[y_t:])-np.std(y_diff_abs)):
        edge_px_y = y_b * ratio
        if np.mean(cluster_y[:int(len(cluster_y)/2)]) < np.mean(cluster_y[int(len(cluster_y)/2):]):
            y_dir = 'top edge'
        elif  np.mean(cluster_y[:int(len(cluster_y)/2)]) > np.mean(cluster_y[int(len(cluster_y)/2):]):
            y_dir = 'bottom edge'
        else:
            y_dir = 'Y direction edge detection error!'
    else:
       y_dir = 'Cannot detect edge correctly!!!'
else:
    y_dir = 'center'
# detect y direction edge

print(x_dir, '\n', edge_px_x, '\n', y_dir, '\n', edge_px_y)

plt.plot(x_profile)
plt.xlabel('X_profile')
plt.show()
plt.plot(y_profile)
plt.xlabel('Y_profile')
plt.show()

